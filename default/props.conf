[docker:ps]
SHOULD_LINEMERGE = false
LINE_BREAKER = ([\r\n]+)
EVENT_BREAKER = ([\r\n]+)
EVENT_BREAKER_ENABLE = true
MAX_TIMESTAMP_LOOKAHEAD = 10
TIME_PREFIX = ^
TIME_FORMAT = %s

KV_MODE = none

EXTRACT-ps = ^\S+\t(?<container_id>\S+)\t(?<image>[^\t]+)\t(?<names>[^\t]+)\t(?<command>[^\t]+)\t(?<created_at>[^\t]+)\t(?<status>(?<status_short>\S+)[^\t]+)\t(?<ports>[^\t]*)\t(?<mounts>[^\t]*)\t(?<networks>[^\t]+)\t(?<size_val>[\d\.]+)(?<size_unit>\S+)\s\(virtual (?<size_virt_val>[\d\.]+)(?<size_virt_unit>[^\)]+)\)

EVAL-size_bytes = case(size_unit=="GB", size_val*1000000000, size_unit=="MB", size_val*1000000, size_unit=="kB", size_val*1000, size_unit=="B", size_val, true(), null())
EVAL-size_virt_bytes = case(size_virt_unit=="GB", size_virt_val*1000000000, size_virt_unit=="MB", size_virt_val*1000000, size_virt_unit=="kB", size_virt_val*1000, size_virt_unit=="B", size_virt_val, true(), null())



[docker:stats]
SHOULD_LINEMERGE = false
LINE_BREAKER = ([\r\n]+)
EVENT_BREAKER = ([\r\n]+)
EVENT_BREAKER_ENABLE = true
MAX_TIMESTAMP_LOOKAHEAD = 10
TIME_PREFIX = ^
TIME_FORMAT = %s

KV_MODE = none

EXTRACT-stats = ^\d+\t(?<container_id>\S+)\t(?<cpu_perc>[\d\.]+)%\t(?<mem_usage_val>[\d\.]+) ?(?<mem_usage_unit>\S+) \/ (?<mem_limit_val>[\d\.]+) ?(?<mem_limit_unit>\S+)\t(?<mem_perc>[\d\.]+)%\t(?<netio_sent_val>[\d\.]+) ?(?<netio_sent_unit>\S+) \/ (?<netio_recv_val>[\d\.]+) ?(?<netio_recv_unit>\S+)\t(?<blockio_read_val>[\d\.]+) ?(?<blockio_read_unit>\S+) \/ (?<blockio_write_val>[\d\.]+) ?(?<blockio_write_unit>\S+)\t(?<pid_count>\d+)

EVAL-mem_usage_bytes = case(mem_usage_unit=="TiB", mem_usage_val*1000000000000, mem_usage_unit=="GiB", mem_usage_val*1000000000, mem_usage_unit=="MiB", mem_usage_val*1000000, mem_usage_unit=="KiB", mem_usage_val*1000, true(), null())
EVAL-mem_limit_bytes = case(mem_limit_unit=="TiB", mem_limit_val*1000000000000, mem_limit_unit=="GiB", mem_limit_val*1000000000, mem_limit_unit=="MiB", mem_limit_val*1000000, mem_limit_unit=="KiB", mem_limit_val*1000, true(), null())
EVAL-netio_sent_bytes = case(netio_sent_unit=="GB", netio_sent_val*1000000000, netio_sent_unit=="MB", netio_sent_val*1000000, netio_sent_unit=="kB", netio_sent_val*1000, netio_sent_unit=="B", netio_sent_val, true(), null())
EVAL-netio_recv_bytes = case(netio_recv_unit=="GB", netio_recv_val*1000000000, netio_recv_unit=="MB", netio_recv_val*1000000, netio_recv_unit=="kB", netio_recv_val*1000, netio_recv_unit=="B", netio_recv_val, true(), null())
EVAL-blockio_read_bytes  = case(blockio_read_unit=="GB",  blockio_read_val*1000000000,  blockio_read_unit=="MB",  blockio_read_val*1000000,  blockio_read_unit=="kB",  blockio_read_val*1000,  blockio_read_unit=="B",  blockio_read_val, true(),  null())
EVAL-blockio_write_bytes = case(blockio_write_unit=="GB", blockio_write_val*1000000000, blockio_write_unit=="MB", blockio_write_val*1000000, blockio_write_unit=="kB", blockio_write_val*1000, blockio_write_unit=="B", blockio_write_val, true(), null())



[docker:top]
SHOULD_LINEMERGE = false
LINE_BREAKER = ([\r\n]+)
EVENT_BREAKER = ([\r\n]+)
EVENT_BREAKER_ENABLE = true
MAX_TIMESTAMP_LOOKAHEAD = 10
TIME_PREFIX = ^
TIME_FORMAT = %s

KV_MODE = none

EXTRACT-top = ^(?<timestamp>\S+)\t(?<container_id>\S+)\t(?<user>\S+)\s+(?<pid>\S+)\s+(?<ppid>\S+)\s+(?<c>\S+)\s+(?<stime>\S+)\s+(?<tty>\S+)\s+(?<cpu_time>\S+)\s+(?<command>[^\t\r\n]+)



[docker:events]
SHOULD_LINEMERGE = false
LINE_BREAKER = ([\r\n]+)
EVENT_BREAKER = ([\r\n]+)
EVENT_BREAKER_ENABLE = true
MAX_TIMESTAMP_LOOKAHEAD = 40
TIME_PREFIX = ^
#TIME_FORMAT = 

KV_MODE = none

EXTRACT-events = ^\S+\s+(?<type>\S+)\s+(?<event>\S+)\s+(?<object>\S+)(?:\s+\((?<extra_detail>.*)\))?
REPORT-docker_simple_events_info = docker_simple_events_info



[docker:inventory]
SHOULD_LINEMERGE = false
LINE_BREAKER = ([\r\n]+)
EVENT_BREAKER = ([\r\n]+)
EVENT_BREAKER_ENABLE = true
DATETIME_CONFIG = CURRENT
TRUNCATE = 0

KV_MODE = json



[docker:logs_json]
SHOULD_LINEMERGE = false
LINE_BREAKER = ([\r\n]+)
EVENT_BREAKER = ([\r\n]+)
EVENT_BREAKER_ENABLE = true
MAX_TIMESTAMP_LOOKAHEAD = 40
TIME_PREFIX = "time":\s*"
#TIME_FORMAT = 

KV_MODE = json
